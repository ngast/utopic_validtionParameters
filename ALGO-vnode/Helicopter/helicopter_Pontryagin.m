%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Reachability analysis of the system helicopter with 3 uncertain parameters %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Automatically generated from helicopter.
% Number of species: 28.
% Number of reactions: 28.
% Coefficients:  1.0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.
% Perturbed parameters: a in [0.1,0.7], b in [1.0,1.5], c in [1.5,2.0]

% Correspondence with original names:
%     x(1) = x1
%     x(2) = x10
%     x(3) = x11
%     x(4) = x12
%     x(5) = x13
%     x(6) = x14
%     x(7) = x15
%     x(8) = x16
%     x(9) = x17
%     x(10) = x18
%     x(11) = x19
%     x(12) = x2
%     x(13) = x20
%     x(14) = x21
%     x(15) = x22
%     x(16) = x23
%     x(17) = x24
%     x(18) = x25
%     x(19) = x26
%     x(20) = x27
%     x(21) = x28
%     x(22) = x3
%     x(23) = x4
%     x(24) = x5
%     x(25) = x6
%     x(26) = x7
%     x(27) = x8
%     x(28) = x9


function helicopter_Pontryagin()

	global dt 


	% Number of variables
	sVars = 28; 
	% Number of controls
	uVars = 3; 
	% Plot flag
	doPlot = 0;
	% 	The uncertain parameter a belongs to [0.1,0.7];
	% 	The uncertain parameter b belongs to [1.0,1.5];
	% 	The uncertain parameter c belongs to [1.5,2.0];
	% Upper control boundaries
	u_min=[ 0.1 1.0 1.5 ];
	% Lower control boundaries
	u_max=[ 0.7 1.5 2.0 ];

	%Initial condition
	x0=[  10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0 ];
	% Vector of coefficients of the sum of variables
	vcoeff=[ 1.0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ];
	% Finite time horizon
	T=1.0;
	% Integration time step
	dt=0.002;
	% Intergation intervals
	tspan = 0 : dt : T;
	tspanRev = T : -dt : 0;


	% Algorithm parameters
	maximize = 1;
	minimize = 0;
	delta = -1.0; % threshold
	max_iter = 1000; % maximal number of algorithm iterations
	step = 25.0;
	gamma = step*ones(1,max_iter); % step-sizes of the correction algorithm

	x = sym('x', [sVars 1]);
	u = sym('u', [uVars 1]);
	p = sym('p', [sVars 1]);
	f = sym('f', [sVars 1]);


	% Symbolic ODE drift vector
	f(1) = 0.99857378006*x(23)+0.053384274244*x(24);
	f(2) = (-0.01975778857)*x(1)+0.009012833714*x(12)+0.311015942657*x(22)+2.81018120479*x(23)+(-0.001602140073)*x(24)+0*x(25)+0*x(26)+0*x(27)+0.008134087133*x(28)+(-0.003710494952)*x(2)+0.86350701147*x(3)+(-1.236460821044)*x(4)+0.060184240645*x(5)+0*x(6)+0*x(7)+0*x(8);
	f(3) = (-0.030385323449)*x(1)+0.003110159427*x(12)+0.312812882924*x(22)+0.287354391281*x(23)+(-0.00233173063)*x(24)+0*x(25)+0*x(26)+0*x(27)+(-8.414922645141)*x(28)+(-36.922139523656)*x(2)+(-18.505141519315)*x(3)+(-3.793715804769)*x(4)+(-2.765572372983)*x(5)+0.035944961732*x(6)+(-0.03891010472)*x(7)+0.025846348888*x(8)+0.527826299191*x(9)+1.697201876759*x(10)+17.980094722474*x(11)+4.615721721183*x(13)+0.618925691035*x(14)+0.71776394151*x(15)+0.036154725527*x(16)+0.021151770407*x(17)+0.200211885807*x(18)+(-0.236208723376)*x(19)+(-10.127341872304)*x(20)+0.037053334254*x(21);
	f(4) = 0.002667394037*x(1)+0.004496152836*x(12)+0.045956750452*x(22)+1.764514260408*x(23)+1.46052012E-4*x(24)+0*x(25)+0*x(26)+0*x(27)+(-17.119523267503)*x(28)+0.536693033369*x(2)+0.353775293385*x(3)+(-8.335731095093)*x(4)+0.078527228401*x(5)+0.005987264162*x(6)+0.006725273267*x(7)+(-0.005979187005)*x(8)+(-0.182029763642)*x(9)+3.233906041666*x(10)+(-0.268381596955)*x(11)+(-0.514971094398)*x(13)+(-0.005888452287)*x(14)+(-0.00311046421)*x(15)+0.081894084826*x(16)+0.066024394813*x(17)+(-0.104516302587)*x(18)+1.63128979696*x(19)+0.066233671911*x(20)+(-0.002829938571)*x(21);
	f(5) = 0.024056576806*x(1)+(-0.001361685819)*x(12)+(-0.230715295944)*x(22)+0.185551143531*x(23)+0.001832537128*x(24)+0*x(25)+0*x(26)+(-0)*x(27)+(-1.696796379292)*x(28)+(-5.819307733117)*x(2)+(-2.712299197847)*x(3)+(-0.61581752704)*x(4)+(-4.029675752634)*x(5)+0.002306818331*x(6)+(-0.004623901048)*x(7)+0.071938991843*x(8)+2.282021405408*x(9)+0.349879770769*x(10)+2.900759066988*x(11)+4.516150272075*x(13)+0.111029828612*x(14)+0.13730505946*x(15)+0.00365562004*x(16)+0.001262406662*x(17)+1.082630189953*x(18)+(-0.024777388732)*x(19)+(-1.766450614425)*x(20)+(-0.930338103031)*x(21);
	f(6) = (-1.753103616578)*x(1)+0.52186960989*x(12)+23.319318958026*x(22)+145.082271971311*x(23)+(-0.138741289403)*x(24)+(-0)*x(25)+(-0)*x(26)+8.60128319E-4*x(27)+(-11.594360544437)*x(28)+(-0.70542490241)*x(2)+(-10.592707880324)*x(3)+(-54.888617486514)*x(4)+(-0.619258600252)*x(5)+(-0.018180886764)*x(6)+(-0.016310350542)*x(7)+0.17226746335*x(8)+3.857750758541*x(9)+(-3.73362923875)*x(10)+0.251977753557*x(11)+1.659474556422*x(13)+0.007076928248*x(14)+0.00759488332*x(15)+(-0.096433822422)*x(16)+(-0.077989008913)*x(17)+1.068213380174*x(18)+(-1.854605830991)*x(19)+(-0.041177323469)*x(20)+0.038137029879*x(21);
	f(7) = 1.708539622488*x(1)+0.111898315003*x(12)+(-13.174473231922)*x(22)+91.46275555623*x(23)+0.127584976026*x(24)+0*x(25)+0*x(26)+(-7.23245056E-4)*x(27)+(-1.878010842263)*x(28)+23.870898681235*x(2)+1.639719754761*x(3)+(-40.888303474223)*x(4)+2.851614162302*x(5)+0.00134943057*x(6)+(-0.024984412428)*x(7)+0.102862439056*x(8)+1.794950045519*x(9)+0.252919074168*x(10)+3.893644396914*x(11)+(-2.155538119928)*x(13)+0.123550997381*x(14)+0.137525326941*x(15)+0.007512594224*x(16)+0.004476043338*x(17)+(-0.081084731931)*x(18)+(-0.05006218142)*x(19)+(-2.033833968448)*x(20)+1.145542115841*x(21);
	f(8) = (-0.069753861204)*x(1)+0.041269247265*x(12)+1.243498527057*x(22)+13.467483657041*x(23)+(-0.005772466581)*x(24)+0*x(25)+0*x(26)+0*x(27)+(-5.161896992464)*x(28)+(-0.784811430978)*x(2)+(-1.913888711445)*x(3)+(-8.087612492321)*x(4)+11.48870135415*x(5)+0.19441123747*x(6)+0.167838434014*x(7)+(-3.255004272242)*x(8)+(-71.490067651024)*x(9)+0.531333931032*x(10)+1.089774627294*x(11)+(-20.947639012098)*x(13)+(-0.006423930487)*x(14)+(-0.078948253623)*x(15)+0.050383537787*x(16)+0.045369546582*x(17)+(-18.580601832107)*x(18)+(-0.295436370828)*x(19)+(-0.680521274763)*x(20)+(-0.683600561672)*x(21);
	f(9) = (-0.013549327978)*x(25)+(-0.012135188033)*x(26)+0.226991094595*x(27)+(-0.012)*x(9);
	f(10) = (-11.385989897412)*x(1)+(-0.005)*x(10);
	f(11) = (-4.554395958965)*x(12)+(-0.005)*x(11);
	f(12) = x(22)+(-0.003182219341)*x(23)+0.059524655342*x(24);
	f(13) = 0.243569095885*x(23)+(-4.554395958965)*x(24)+(-0.01)*x(13);
	f(14) = (-4.554395958965)*x(22)+(-8.5)*x(14)+(-18)*x(15);
	f(15) = x(14);
	f(16) = (-11.385989897412)*x(23)+(-8.5)*x(16)+(-18)*x(17);
	f(17) = x(16);
	f(18) = 0.68318607598*x(28)+0.514736886625*x(2)+0.282998565164*x(3)+0.440668616363*x(4)+(-2.382738811465)*x(5)+(-0.037424700426)*x(6)+(-0.035002491999)*x(7)+0.614952694278*x(8)+14.829958398888*x(9)+(-0.110759742503)*x(10)+(-0.226034186438)*x(11)+4.345468653096*x(13)+0.001333027828*x(14)+0.016376955559*x(15)+(-0.010465240818)*x(16)+(-0.0094224826)*x(17)+(-6.14561518105)*x(18)+0.061014181775*x(19)+0.141165339638*x(20)+0.141806743312*x(21);
	f(19) = (-36.03935472971)*x(28)+0.767400874818*x(2)+(-0.190879388177)*x(3)+(-11.678174370212)*x(4)+(-0.041149877278)*x(5)+(-0.026017271417)*x(6)+(-0.026698725144)*x(7)+0.036415219598*x(8)+0.73865635835*x(9)+6.810845841283*x(10)+(-0.38478495798)*x(11)+(-0.708557300741)*x(13)+(-0.005524328707)*x(14)+0.002522572903*x(15)+0.171826920583*x(16)+0.138368426838*x(17)+0.071909684799*x(18)+(-6.567495145681)*x(19)+0.039293511274*x(20)+0.006041152866*x(21);
	f(20) = 1.997224587333*x(28)+13.482210983798*x(2)+2.488520358003*x(3)+0.076750797248*x(4)+0.804972334222*x(5)+0.023466195202*x(6)+(-0.022740687251)*x(7)+0.018646161041*x(8)+0.436604617107*x(9)+(-0.414374632569)*x(10)+(-6.563020897889)*x(11)+(-1.423460802051)*x(13)+(-0.224998971426)*x(14)+(-0.259852011779)*x(15)+(-0.008437464875)*x(16)+(-0.00394534411)*x(17)+0.102235829031*x(18)+0.191829027845*x(19)+(-6.31242884154)*x(20)+(-0.038075090345)*x(21);
	f(21) = u(3)*x(28)+(-3.415298165208)*x(2)+(-1.836225244248)*x(3)+(-0.015605131825)*x(4)+10.4868455956*x(5)+(-0.031379180918)*x(6)+0.00126674641*x(7)+0.525873993847*x(8)+9.808565668907*x(9)+(-0.367529750255)*x(10)+1.37040552413*x(11)+(-12.076970057329)*x(13)+0.004883176776*x(14)+(-0.015765473705)*x(15)+(-3.99777933E-4)*x(16)+(-4.97333312E-4)*x(17)+0.199818976539*x(18)+(-0.002648145523)*x(19)+(-0.101212258081)*x(20)+(-5.199268943788)*x(21);
	f(22) = (-11.570495605469)*x(22)+(-2.544637680054)*x(23)+(-0.063602626324)*x(24)+0.106780529022*x(25)+(-0.09491866827)*x(26)+0.007107574493*x(27)+(-3.700790207851)*x(28)+(-16.213284674534)*x(2)+(-2.984968535139)*x(3)+(-0.493137919288)*x(4)+(-1.186954196152)*x(5)+(-0.031106608756)*x(6)+0.024595252653*x(7)+0.008231369923*x(8)+0.231787619674*x(9)+0.745302732591*x(10)+7.895709940231*x(11)+2.026930360369*x(13)+0.271792657736*x(14)+0.315196108541*x(15)+0.01587684771*x(16)+0.009288507454*x(17)+0.087920280806*x(18)+(-0.103727794204)*x(19)+(-4.447282126346)*x(20)+0.016271459306*x(21);
	f(23) = u(1)*x(22)+(-1.998182296753)*x(23)+0.016651883721*x(25)+0.018462046981*x(26)+(-0.001187470742)*x(27)+(-7.517319654181)*x(28)+0.236494174025*x(2)+(-0.028725044803)*x(3)+(-2.442989538035)*x(4)+0.03451055081*x(5)+(-0.004683216652)*x(6)+(-0.00515403869)*x(7)+(-0.002104275246)*x(8)+(-0.079935853309)*x(9)+1.420125114638*x(10)+(-0.117856066698)*x(11)+(-0.226142434271)*x(13)+(-0.002585832387)*x(14)+(-0.001365917341)*x(15)+0.035962654791*x(16)+0.028993699893*x(17)+(-0.045896888864)*x(18)+0.716358354284*x(19)+0.029085601036*x(20)+(-0.001242728387)*x(21);
	f(24) = (-2.040895462036)*x(22)+(-0.458999156952)*x(23)+(-0.73502779007)*x(24)+0.019255757332*x(25)+(-0.00459562242)*x(26)+0.002120360732*x(27)+(-0.740775522612)*x(28)+(-2.555714688932)*x(2)+(-0.339301128908)*x(3)+(-0.033104023297)*x(4)+(-1.446467788369)*x(5)+(-0.007442776396)*x(6)+(-0)*x(7)+0.030657946816*x(8)+1.002118140789*x(9)+0.153644862643*x(10)+1.273828227991*x(11)+1.983204935524*x(13)+0.048757213739*x(14)+0.060295617991*x(15)+0.001605314985*x(16)+5.54368427E-4*x(17)+0.475422075598*x(18)+(-0.010880647601)*x(19)+(-0.775712358056)*x(20)+(-0.408545111762)*x(21);
	f(25) = (-32.103607177734)*x(1)+(-0.503355026245)*x(22)+2.297859191895*x(23)+(-0.021215811372)*x(25)+(-0.02116791904)*x(26)+0.01581159234*x(27)+8.689411857722*x(28)+(-0.215429806172)*x(2)+0.063500560122*x(3)+2.847523923644*x(4)+(-0.297021616015)*x(5)+0.001323463163*x(6)+0.002124820781*x(7)+0.068860932948*x(8)+1.694077894544*x(9)+(-1.639571645676)*x(10)+0.110652545728*x(11)+0.728735301618*x(13)+0.003107735169*x(14)+0.003335187976*x(15)+(-0.042347579477)*x(16)+(-0.034247794709)*x(17)+0.469091132962*x(18)+(-0.814424502262)*x(19)+(-0.018082452136)*x(20)+0.016747349252*x(21);
	f(26) = 0.102161169052*x(1)+32.057830810547*x(12)+(-2.347217559814)*x(22)+(-0.503611564636)*x(23)+0.83494758606*x(24)+0.02122657001*x(25)+(-0.037879735231)*x(26)+3.5400386E-4*x(27)+(-0.560681623936)*x(28)+(-3.574948145694)*x(2)+(-0.788176766644)*x(3)+(-0.107590635594)*x(4)+0.908657075077*x(5)+(-0.008720966051)*x(6)+0.005669792925*x(7)+0.044884407612*x(8)+0.788227489086*x(9)+0.111065913657*x(10)+1.709840089441*x(11)+(-0.946574755181)*x(13)+0.054255711842*x(14)+0.060392345409*x(15)+0.003299051857*x(16)+0.00196559253*x(17)+(-0.03560723866)*x(18)+(-0.021984114632)*x(19)+(-0.893130060176)*x(20)+0.503048977806*x(21);
	f(27) = (-u(2))*x(1)+1.713829040527*x(12)+(-0.004005432129)*x(22)+(-0.057411193848)*x(23)+0.013989634812*x(25)+(-9.06753354E-4)*x(26)+(-0.290513515472)*x(27)+(-1.440209153996)*x(28)+(-1.089782421583)*x(2)+(-0.599051729911)*x(3)+(-0.930901394778)*x(4)+5.04406072285*x(5)+0.079229241316*x(6)+0.074101747848*x(7)+(-1.301808243838)*x(8)+(-31.393874531397)*x(9)+0.233327947688*x(10)+0.478559456452*x(11)+(-9.198865975131)*x(13)+(-0.002820980233)*x(14)+(-0.034669033757)*x(15)+0.022125233836*x(16)+0.01992340894*x(17)+(-8.159414332666)*x(18)+(-0.129736796488)*x(19)+(-0.298841506489)*x(20)+(-0.30019373275)*x(21);
	f(28) = 0.050176870833*x(1)+(-0.003161246171)*x(12)+(-0.48616517519)*x(22)+0.266534777047*x(23)+0.003826227932*x(24)+0*x(25)+0*x(26)+(-0)*x(27)+(-0.02065732397)*x(28)+0.001301453941*x(2)+0.213359280279*x(3)+0.881596311923*x(4)+0.051809053856*x(5)+0*x(6)+0*x(7)+0*x(8);


	initpontryagin(f,p,x,u);

	cHeader = { 'a' 'b' 'c'	 };
	pontryagin(maximize,vcoeff,max_iter,delta,uVars,cHeader,gamma,tspan,tspanRev,x0,u_max,u_min,'helicopter_Pontryagin_max.csv',doPlot);
	pontryagin(minimize,vcoeff,max_iter,delta,uVars,cHeader,gamma,tspan,tspanRev,x0,u_max,u_min,'helicopter_Pontryagin_min.csv',doPlot);

	exit;


end
function initpontryagin(f,p,x,u)

     global htf
     global p_ind_Hu
     global x_ind_Hu
     global htHu
     global htHx
     global x_ind_Hx
     global u_ind_Hx
     
    
    
    % Numeric ODE drift vector 
    htf = matlabFunction(f); 
    
    % Compute the symbolic Hamiltonian 
    %H = dot(p,f); %more ellegant but introduces conjugates
    sym H;
    H = 0;
    for i = 1 : size(f,1)
        H = H + p(i)*f(i);
    end
       
    
    % Symbolic drift of the costate p    
    Hx = -jacobian(H, x);     
    HxVars = symvar(Hx);
    % Compute the indices of x appearing in Hx
    x_ind_Hx = [];
    for i = 1 : size(x,1)
        for j = 1 : size(HxVars,2)
            if(isequal(x(i),HxVars(j)))
                x_ind_Hx = [x_ind_Hx , i];
                break;
            end
        end
    end
    % Compute the indices of u appearing in Hx
    u_ind_Hx = [];
    for i = 1 : size(u,1)
        for j = 1 : size(HxVars,2)
            if(isequal(u(i),HxVars(j)))
                u_ind_Hx = [u_ind_Hx , i];
                break;
            end
        end
    end        
    % Numeric drift of the costate p
    htHx = matlabFunction(Hx);
    

    % Symbolic correction of control u
    Hu = -jacobian(H, u);   
    HuVars = symvar(Hu);    
    % Since we assume that the drift is linear in controls, the indices of
    % u do not have to be computed (because there are no u variables in Hu)    
    % Compute the indices of x appearing in Hu
    x_ind_Hu = [];
    for i = 1 : size(x,1)
        for j = 1 : size(HuVars,2)
            if(isequal(x(i),HuVars(j)))
                x_ind_Hu = [x_ind_Hu , i];
                break;
            end
        end
    end
    % Compute the indices of p appearing in Hu
    p_ind_Hu = [];
    for i = 1 : size(p,1)
        for j = 1 : size(HuVars,2)
            if(isequal(p(i),HuVars(j)))
                p_ind_Hu = [p_ind_Hu , i];
                break;
            end
        end
    end
    % Numeric correction of control u
    htHu = matlabFunction(Hu);

end


function pontryagin(maximize,vcoeff,max_iter,delta,uVars,cHeader,gamma,tspan,tspanRev,x0,u_max,u_min,csvfile,doPlot)

     global x_num
     global u_num
     global p_ind_Hu
     global x_ind_Hu
     global htHu
    

     if(maximize)
         % Boundary condition of the costate
        pT = - vcoeff;
     else
        %Use the following if interested in minimizing
        pT = vcoeff;
     end
        
     

    delta_u_num = zeros(uVars,size(tspan,2));
	new_u_num = zeros(uVars,size(tspan,2));
    
    u_num = zeros(uVars,size(tspan,2));
    for i = 1 : uVars
        u_num(i,:) = ((u_max(i) + u_min(i)) / 2) .* ones(1,size(tspan,2));
    end
    
    
    % Gradient based Pontryagin algorithm for the correction of the 
    % optimal control
    corr = inf;
    tic;
    for iter = 1 : max_iter
        if(corr <= delta)
            break;
        end
        corr = 0;
        
        [t,x_num] = ode45(@numf,tspan,x0);
        [t,p_num] = ode45(@numHx,tspanRev,pT);
        p_num = flipud(p_num);
        
        for j = 1 : size(tspan,2)
            % Compute the control change at time j
            p_num_aux = p_num(j,:);
            p_num_aux = p_num_aux(p_ind_Hu);
            p_cell = num2cell(p_num_aux);
            
            x_num_aux = x_num(j,:);
            x_num_aux = x_num_aux(x_ind_Hu);
            x_cell = num2cell(x_num_aux);
            
            delta_u_num(:,j) = htHu(p_cell{:},x_cell{:});            
            new_u_num(:,j) = u_num(:,j) + gamma(iter) .* delta_u_num(:,j);

            % Project the new controls to the control space at time j
            new_u_num(:,j) = min(new_u_num(:,j), u_max');
            new_u_num(:,j) = max(new_u_num(:,j), u_min');
            
            % Compute the norm of the correction vector at time j
            aux = norm(new_u_num(:,j) - u_num(:,j),'inf');
            if(aux > corr)
                corr = aux;
            end            
        end    
        
        u_num = new_u_num;
    end
    %fprintf('Computation time: %s', toc);
	
	m = size(u_num,1)+1;
    u_num2(1,1) = 0.0;
    u_num2(2:m,1) = u_num(:,1);
    ind=2;
    for i=2:size(u_num,2)-1
        if ~isequal(u_num(:,i), u_num(:,i-1))
            u_num2(1,ind) = tspan(i);
            u_num2(2:m,ind) = u_num(:,i);
	    ind=ind+1;
        end
    end
    u_numTransp = u_num2';
	%u_numTransp = u_num';
	 
	commaHeader = [cHeader;repmat({','},1,numel(cHeader))]; %insert commaas
	commaHeader = commaHeader(:)';
	textHeader = cell2mat(commaHeader); %cHeader in text with commas
	%write header to file
	fid = fopen(csvfile,'w');
	fprintf(fid,'%s\n',textHeader);
	fclose(fid);
	%write data to end of file
	dlmwrite(csvfile,u_numTransp, 'precision', '%.8i','-append');
    
    % After the grandient algorithm has finished, u_num stores the optimal 
    % control candidate    
    if(doPlot == 1)        
        % Plot the optimal control candidate and the underlying ODE solution
        [t,x_num] = ode45(@numf,tspan,x0);    
        %figure(03)
        figure()
        plot(tspan,x_num);    
	for j = 1 : size(u_num,1)
            figure()
	    plot(tspan,u_num(j,:));
	    axis([0 tspan(size(tspan,2)) u_min(j) u_max(j)])
	end       
    end

end
function dx = numf(t,x)

    global u_num
    global htf
    global dt    
    
    i = max(floor(t / dt),1);    
    u = u_num(:,i);  
    u_cell = num2cell(u);
    x_cell = num2cell(x);
    dx = htf(u_cell{:},x_cell{:});
end


function dp = numHx(t,p)

    global u_num
    global x_num
    global htHx
    global x_ind_Hx    
    global u_ind_Hx      
    global dt    
    
    i = max(floor(t / dt),1);    
    u = u_num(:,i);   
    u = u(u_ind_Hx);
    u_cell = num2cell(u);
    x = x_num(i,:);
    x = x(x_ind_Hx);    
    x_cell = num2cell(x);
    
    p_cell = num2cell(p);    

    dp = htHx(p_cell{:},u_cell{:}, x_cell{:})';
end


